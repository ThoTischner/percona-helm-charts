apiVersion: pxc.percona.com/v1
kind: PerconaXtraDBCluster
metadata:
  name: {{ include "pxc-database.fullname" . }}
  labels:
{{ include "pxc-database.labels" . | indent 4 }}
  finalizers:
{{ .Values.finalizers | toYaml | indent 4 }}
spec:
  {{- if .Values.clusterSecret }}
  secretsName: {{ .Values.clusterSecret }}
  {{- else }}
  secretsName: {{ include "pxc-database.fullname" . }}
  {{- end }}
  {{- if .Values.clusterSecretSSL }}
  sslSecretName: {{ .Values.clusterSecretSSL }}
  {{- else }}
  sslSecretName: {{ include "pxc-database.fullname" . }}
  {{- end }}
  {{- if .Values.clusterSecretSSLInternal }}
  sslInternalSecretName: {{ .Values.clusterSecretSSLInternal }}
  {{- else }}
  sslInternalSecretName: {{ include "pxc-database.fullname" . }}
  {{- end }}
# pause: false
  {{- $pxc := .Values.pxc }}
  pxc:
    size: {{ $pxc.size }}
    allowUnsafeConfigurations: false
    image: "{{ $pxc.image.repository }}:{{ $pxc.image.tag }}"
    readinessDelaySec: {{ $pxc.readinessDelaySec }}
    livenessDelaySec: {{ $pxc.livenessDelaySec }}
    forceUnsafeBootstrap: {{ $pxc.forceUnsafeBootstrap }}
    {{- if $pxc.configuration }}
    configuration: |
    {{ $pxc.configuration | nindent 6 }}
    {{- end }}
    imagePullSecrets:
{{ $pxc.imagePullSecrets | toYaml | indent 6 }}
#    priorityClassName: high-priority
#    annotations:
#      iam.amazonaws.com/role: role-arn
#    labels:
#      rack: rack-22
    resources:
      requests:
{{ $pxc.resources.requests | toYaml | indent 8 }}
      limits:
{{ $pxc.resources.limits | toYaml | indent 8 }}
#    nodeSelector:
#      disktype: ssd
    affinity:
{{ $pxc.resources.affinity | toYaml | indent 6 }}
    tolerations:
{{ $pxc.resources.tolerations | toYaml | indent 6 }}
    podDisruptionBudget:
      maxUnavailable: 1
#      minAvailable: 0
    volumeSpec:
#      emptyDir: {}
#      hostPath:
#        path: /data
#        type: Directory
      persistentVolumeClaim:
#        storageClassName: standard
#        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 6Gi
    gracePeriod: {{ $pxc.gracePeriod }}
  proxysql:
    enabled: true
    size: 3
    image: percona/percona-xtradb-cluster-operator:1.0.0-proxysql
#    imagePullSecrets:
#      - name: private-registry-credentials
#    annotations:
#      iam.amazonaws.com/role: role-arn
#    labels:
#      rack: rack-22
#    serviceType: ClusterIP
    resources:
      requests:
        memory: 1G
        cpu: 600m
#      limits:
#        memory: 1G
#        cpu: 700m
#    priorityClassName: high-priority
#    nodeSelector:
#      disktype: ssd
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
#      advanced:
#        nodeAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            nodeSelectorTerms:
#            - matchExpressions:
#              - key: kubernetes.io/e2e-az-name
#                operator: In
#                values:
#                - e2e-az1
#                - e2e-az2
#    tolerations:
#    - key: "node.alpha.kubernetes.io/unreachable"
#      operator: "Exists"
#      effect: "NoExecute"
#      tolerationSeconds: 6000
    volumeSpec:
#      emptyDir: {}
#      hostPath:
#        path: /data
#        type: Directory
      persistentVolumeClaim:
#        storageClassName: standard
#        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
    podDisruptionBudget:
      maxUnavailable: 1
#      minAvailable: 0
    gracePeriod: 30
  pmm:
    enabled: false
    image: perconalab/pmm-client:1.17.1
    serverHost: monitoring-service
    serverUser: pmm
  backup:
    image: percona/percona-xtradb-cluster-operator:1.0.0-backup
    serviceAccountName: percona-xtradb-cluster-operator
#    imagePullSecrets:
#      - name: private-registry-credentials
    storages:
      s3-us-west:
        type: s3
        s3:
          bucket: S3-BACKUP-BUCKET-NAME-HERE
          credentialsSecret: my-cluster-name-backup-s3
          region: us-west-2
      fs-pvc:
        type: filesystem
        volume:
          persistentVolumeClaim:
#            storageClassName: standard
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 6Gi
    schedule:
      - name: "sat-night-backup"
        schedule: "0 0 * * 6"
        keep: 3
        storageName: s3-us-west
      - name: "daily-backup"
        schedule: "0 0 * * *"
        keep: 5
        storageName: fs-pvc